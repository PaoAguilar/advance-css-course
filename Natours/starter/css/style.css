/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box; /* el border box es para que los bordes y los rellenos no se añadan al total width o height que especificamos en un box */
}

body {
  font-family: 'Lato', sans-serif;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.7; /* significa que es 1.7 mas grande que la altura de la linea predefinida */
  color: #777;
  padding: 30px;
}

.header {
  height: 95vh; /* En cada punto, la altura de este elemento debe ser 95% de la altura de la ventana grafica
  Si pomenos 100, el elemento tendra la misma altura del view port */
  background-image: linear-gradient(
      to right bottom,
      rgba(126, 213, 111, 0.8),
      rgba(40, 180, 133, 0.8)
    ),
    url(../img/hero.jpg); /* la imagen se espicifico que estara debajo de los colores */
  background-size: cover; /* lo que hace cover es que cualquier que sea el view port del elemento, siempre va a tratar de hacer fit con el elemento dentro del box */
  background-position: top; /* la position de la imagen siempre va a quedarse arriba cuando se haga mas pequeña */
  position: relative;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /* la primer esquina no necesitamos moverla
    la segunda esquina necesitamos moverla en la x xq tiene que estar 100% separada a la primer esquina, la y no se mueve
    la tercera esquina en equis necesita estar separado un 100% con la otra esquina, y en y que se separa solo un 75vh, un 75% de la view port height de la pantalla */
  /* especifica un poligono en el que la imagen o el elemento seguira siendo visible.
    Especificamos coordenadas que definen el poligono
    Las x e y, representan 4 coordenadas de las 4 esquinas del elemento
    Empieza desde arriba izquierda, arrriba derecha, abajo derecha y abajo izquierda */
}

.logo-box {
  position: absolute; /* una position absolute siempre tiene un padre que es la position relative, su padre en este casi es la clase header*/
  /* Top y left, tienen como referencia el relative, entonces desde ahi van a empezar a contar */
  top: 40px; /* desde donde va a comenzar, entonces contando 40px desde arriba */
  left: 40px;
}

.logo {
  height: 35px;
}

.text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(
    -50%,
    -50%
  ); /* la mitad del ancho a la izquierda, y la mitad del alto para arriba */
  text-align: center;
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;

  backface-visibility: hidden;
  margin-bottom: 60px;
}

.heading-primary-main {
  display: block;
  font-size: 60px;
  font-weight: 400;
  letter-spacing: 35px;

  animation-name: moveInLeft;
  animation-duration: 1s;
  animation-timing-function: ease-out;

  /* 
  animation-delay: 2s; 
  animation-iteration-count: 3;
  */
}

.heading-primary-sub {
  display: block;
  font-size: 20px;
  font-weight: 700;
  letter-spacing: 17.4px;

  animation: moveInRight 1s ease-out;
}

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-100px);
  }
  80% {
    transform: translateX(10px);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(100px);
  }
  80% {
    transform: translateX(-10px);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(30px);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}

/* :link es una pseudo clase, que son estados del elemento*/
.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 15px 40px; /* left and right */
  display: inline-block;
  border-radius: 100px;
  transition: all 0.2s;
  position: relative;
}

.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
}

.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
}

.btn-white {
  background-color: #fff;
  color: #777;
}

/* 
after es un pseudo element 
Se hara un btn igual al que ya tenemos, pero lo colocamos atras del boto, y cuando nos desplazamos fuera del boton, entonces el pseudo elemento oculto vuelve sorprendentemenete detras del boton
*/
.btn::after {
  content: '';
  display: inline-block;
  height: 100%; /* 100% del btn que ya tenemos */
  width: 100%;
  border-radius: 100px;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1; /* define la position del elemento si estan uno encima de otro */
  transition: all 0.4s;
}

.btn-white::after {
  background-color: #fff;
}

.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6); /* incrementa el elemento */
  opacity: 0;
}

.btn-animated {
  animation: moveInBottom 0.5s ease-out 0.75s;
  animation-fill-mode: backwards; /* automaticamente aplica los estilos del 0% antes de que la animacion empiece, entonces los estilos del 0% no se aplicaran antes que la animacion empiece */
}
